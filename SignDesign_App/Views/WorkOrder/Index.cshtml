@using SignDesignCorpus;
@using SignDesignCorpus.ViewModels;
@using SignDesign_App.Models;
@using Microsoft.AspNetCore.Identity;
@model IEnumerable<WorkOrderViewModel>
@inject UserManager<ApplicationUser> userManager;

@{
    var currentUser = await userManager.GetUserAsync(User);
    var roles = userManager.GetRolesAsync(currentUser).Result;
    string currentUserRole = roles[0];
}

<h1>
	Work Orders
</h1>

<kendo-grid name="workOrderGrid" on-edit="onEdit" on-cancel="onPopupClose" on-data-bound="onWorkOrderDataBound" height="750">
    <datasource type="DataSourceTagHelperType.Ajax" page-size="50" server-operation="true" on-error="fnShowError">
        <transport>
            @*<create url="WorkOrder/Create" />*@
            <read url="WorkOrder/Read" />
            @*<update url="WorkOrder/Update" />*@
            <destroy url="WorkOrder/Delete" />
        </transport>
        <schema>
            <model id="Id">
                <fields>
                    <field name="Id" type="number" editable="false"></field>
                    <field name="Number" type="String"></field>
                    @* <field name="MaterialRequestedFromId" type="number" editable="false"></field>
                    <field name="MaterialRequestedFromName" type="String"></field> *@
                    <field name="MaterialRequestedById" type="number" editable="false"></field>
                    <field name="MaterialRequestedByName" type="String"></field>
                    <field name="Status" type="String"></field>
                    <field name="IsHold" type="String"></field>
                    <field name="StatusDate" type="Date"></field>
                </fields>
            </model>
        </schema>
    </datasource>
    <editable mode="popup" template-id="popup-editor"/>
    <groupable enabled="true" />
    <sortable enabled="true" />
    <filterable enabled="true" />
    <pageable button-count="8" refresh="true" page-sizes="new int[] { 10, 25, 50, 75 }">
    </pageable>
    @if(currentUserRole != "ENGINEER")
    {
        <toolbar>
            <toolbar-button name="create" text="New Sign Request"></toolbar-button>
        </toolbar>
    }    
    <columns>
        <column field="Id" title="Id" hidden=true/>
        @*<column field="Number" title="Number" />*@
        <column field="Number" template="#=template(data)#" title="Number" width="180"/>
        @* <column field="MaterialRequestedFromId" title="Requested From" hidden=true/>
        <column field="MaterialRequestedFromName" title="Requested From" width="200"/> *@
        <column field="MaterialRequestedById" title="Requested By" hidden=true/>
        <column field="MaterialRequestedByName" title="Requested By" />
        <column field="Status" title="Status" width="180"/>
        @* <column field="IsHold" title="Hold" width="140" /> *@
        <column field="IsHold" template="#=holdTemplate(data)#" title="Hold" width="120" />
        <column field="StatusDate" title="Date" format="{0:MM/dd/yyyy}" width="180"/>
        <column width="110">
            <commands>
                <column-command text=" " name="edit"></column-command>
                <column-command text=" " name="destroy"></column-command>
            </commands>
        </column>
    </columns>
</kendo-grid>

@* Dialog used to display messages (success, error) when performing CRUD operations on work order records *@
<div id="messageDialog">
</div>

@* Window used to display the images/attachments from the kendo upload control *@
<kendo-window id="imageWindow" name="imageWindow"
    title="" 
    width="20%"
    height="auto"
    visible="false"
    draggable="false"
    resizable="false"
    modal="true"
    position-top="10%">
</kendo-window>

<script>
    // variables ******************************************************************************************************************************************
    var cloneCount = 0;             // current number of sign segments
    var cloneCountMax = 10;         // sets the updated maximum value of sign segments (this increases when sign segments are deleted)
    const cloneCountLimit = 10;     // limit of sign containers accepted by the application
    var workOrderId = 0;
    var isNew;
    var closePopup = true;
    var currentWorkOrderStatus = '';    // current work order status used when editing an existing work order

    // Sets that the popup will be closed. Used by grid's on-close event ***********************************************************************************
    function onPopupClose(e){
        closePopup = true;
        RefreshGrid();
    }

    // Set the work order number by merging the maintenance section number and the work order id *************************************************************
    function template(data) {
        return `<div> ${ data.MaterialRequestedByNumber}-${ data.Id} <div/>`
    }

    // Set the hold template when the IsHold property is set to true *************************************************************
    function holdTemplate(data) {
        var value = data.IsHold;

        if (value === "true") {
            return `<span class="red-circle"></span> HOLD`;
        }

        return "";
    }

    // Set template for 'Status' column in work order grid ***************************************************************************************************
    function onWorkOrderDataBound(e){
        var grid = this;
        grid.table.find("tr").each(function () {
            var dataItem = grid.dataItem(this);

            $("td:contains('DRAFT')").addClass("status-css-draft");
            $("td:contains('CREATED')").addClass("status-css-created");
            $("td:contains('REQUESTED')").addClass("status-css-requested");
            $("td:contains('AREA ENGINEER')").addClass("status-css-engineer");
            $("td:contains('APPROVED')").addClass("status-css-approved");
            $("td:contains('RECEIVED')").addClass("status-css-received");
            $("td:contains('INSTALLED')").addClass("status-css-installed");

            // Check if edit button will be disabled
            // Column 6 is for status and column 8 is for edit and delete buttons
            if (this.cells.item(4).innerHTML == "CREATED") {
                if ("@currentUserRole" == "ENGINEER" || "@currentUserRole" == "ADMIN" || "@currentUserRole" == "USER")
                    this.cells.item(7).getElementsByClassName("k-grid-edit")[0].setAttribute("disabled", true);
                if ("@currentUserRole" == "ADMIN")
                    this.cells.item(7).getElementsByClassName("k-grid-delete")[0].setAttribute("disabled", true);
            }
            else if (this.cells.item(4).innerHTML == "AREA ENGINEER") {
                if ("@currentUserRole" == "USER" || "@currentUserRole" == "ADMIN" || "@currentUserRole" == "SUPERVISOR") {
                    this.cells.item(7).getElementsByClassName("k-grid-edit")[0].setAttribute("disabled", true);
                    this.cells.item(7).getElementsByClassName("k-grid-delete")[0].setAttribute("disabled", true);
                }
            }
            else if (this.cells.item(4).innerHTML == "REQUESTED") {
                if ("@currentUserRole" == "USER" || "@currentUserRole" == "SUPERVISOR" || "@currentUserRole" == "ENGINEER")
                    this.cells.item(7).getElementsByClassName("k-grid-edit")[0].setAttribute("disabled", true);
                if ("@currentUserRole" == "SUPERVISOR")
                        this.cells.item(7).getElementsByClassName("k-grid-delete")[0].setAttribute("disabled", true);
            }
            else if (this.cells.item(4).innerHTML == "APPROVED" || this.cells.item(4).innerHTML == "RECEIVED" || this.cells.item(4).innerHTML == "INSTALLED") {
                if ("@currentUserRole" == "ENGINEER")
                    this.cells.item(7).getElementsByClassName("k-grid-edit")[0].setAttribute("disabled", true);
                if ("@currentUserRole" == "USER" || "@currentUserRole" == "SUPERVISOR" || "@currentUserRole" == "ENGINEER")
                    this.cells.item(7).getElementsByClassName("k-grid-delete")[0].setAttribute("disabled", true);
            }


            if ("@currentUserRole" == "USER" || "@currentUserRole" == "ENGINEER")
                    $(".k-grid-delete").attr("disabled", true);

            kendo.bind($(this), dataItem);
        });
    }

    // Function that opens the popup window to create or edit the work orders *********************************************************************************
    function onEdit(e) {
        var editWindow = this.editable.element.data("kendoWindow");
        editWindow.setOptions({ title: "", height: "90%", width: "90%", resizable: false });
        editWindow.center();
        //editWindow.bind("close", onEditWindowClose);
        cloneCount = 0;
        cloneCountMax = cloneCountLimit;

        //$(".k-grid-update").off().on("click", SaveOrUpdate);
        $(".k-grid-update").hide();
        $(".k-grid-cancel").hide();
        //$(".k-button.k-button-md.k-rounded-md.k-button-flat.k-button-flat-base.k-icon-button.k-window-action").removeClass("k-button-flat k-button-flat-base").addClass("k-button-solid k-button-solid-error");
        //$(".k-grid-cancel").on("click", function (e) {
        //    closePopup = true;
        //    alert("close button: " + closePopup);
        //});

        if (!e.model.isNew()) {
            isNew = false;
            workOrderId = e.model.get('Id');

            //update text for Update button
    //         if ("@currentUserRole" == "SUPERVISOR" || "@currentUserRole" == "USER") //change to Submit for users and supervisors
    //         {
    //             $('span:contains(Update)').text('Submit');
    //         }
    //         else if("@currentUserRole" == "ADMIN"){ //change to Approve for admins
				// $('span:contains(Update)').text('Approve');
    //         }

            $.ajax({
                type: 'GET',
                url: '/WorkOrder/ReadWorkOrders',
                contentType: 'application/json; charset=utf-8',
                data: { id: e.model.get("Id") },
                success: function (result) {
                    LoadWorkOrderInfo(result);
                },
                error: function (xhr, textStatus, errorThrown) {
                    fnShowMessage(xhr.responseText, "Error");
                },
                complete: function () {
                    initializeControls();
                }
            })
        }
        else {
            isNew = true;
            currentWorkOrderStatus = ''; //reset current work order status when a new work order is opened
            addSegment(null, null, null);

            @{
                if (currentUser.MaintenanceSectionId.ToString().Length == 0)
                    currentUser.MaintenanceSectionId = -1;
            }

            var currentMaintSection = @currentUser.MaintenanceSectionId == -1 ? null : @currentUser.MaintenanceSectionId;

            $('span:contains(Update)').text('Create');
            $.ajax({
                type: 'GET',
                url: '/WorkOrder/ReadMaintenanceSectionParameters',
                contentType: 'application/json; charset=utf-8',
                data: { id: currentMaintSection },
                success: function (result) {
                    LoadMaintenanceSectionInfo(result);
                },
                error: function (xhr, textStatus, errorThrown) {
                    fnShowMessage(xhr.responseText, "Error");
                },
                complete: function () {
                    initializeControls();
                }
            })
        }
    }

    // ****************************************************************************************************************************************************
    function initializeControls() {
        if("@currentUserRole" == "ADMIN") {
            if(isNew || currentWorkOrderStatus == "DRAFT"){
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-primary" onclick="SaveOrUpdate(\'Submit\')"<span class="k-button-text">Save & Submit</span></button>').insertAfter(".k-grid-update");
            }
            else{
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-dark" onclick="CreatePDF()"><span class="k-icon k-i-file-pdf k-button-icon"></span><span class="k-button-text">Generate PDF</span></button>').insertAfter(".k-grid-update");
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-success" onclick="SaveOrUpdate(\'Submit\')"><span class="k-icon k-i-check k-button-icon"></span><span class="k-button-text">Approve</span></button>').insertAfter(".k-grid-update");
            }
            $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-secondary" onclick="SaveOrUpdate(\'Save\')"><span class="k-button-text">Save</span></button>').insertAfter(".k-grid-update");
            
            //const isEnabled = isNew || currentWorkOrderStatus == "DRAFT" ? false : true; //for new or draft work orders disable fields
            //$('#approvedByMaintenance').data("kendoDropDownList").enable(isEnabled);
            //$('#approvedByMaintenanceDate').data("kendoDatePicker").enable(isEnabled);
            $('#approvedByAreaEngineer').data("kendoDropDownList").enable(false);
            $('#approvedByAreaEngineerDate').data("kendoDatePicker").enable(false);
            //$('#approvedByDistrict').data("kendoDropDownList").enable(isEnabled);
            //$('#approvedByDistrictDate').data("kendoDatePicker").enable(isEnabled);
        }
        else if("@currentUserRole" == "SUPERVISOR") {
            if(!isNew){
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-dark" onclick="CreatePDF()"><span class="k-icon k-i-file-pdf k-button-icon"></span><span class="k-button-text">Generate PDF</span></button>').insertAfter(".k-grid-update");
            }
            if(isNew || (currentWorkOrderStatus != "APPROVED" && currentWorkOrderStatus != "RECEIVED" && currentWorkOrderStatus != "INSTALLED")){
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-primary" onclick="SaveOrUpdate(\'Submit\')"<span class="k-button-text">Save & Submit</span></button>').insertAfter(".k-grid-update");
            }            
            $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-secondary" onclick="SaveOrUpdate(\'Save\')"><span class="k-button-text">Save</span></button>').insertAfter(".k-grid-update");
            
            //var isEnabled = (isNew || currentWorkOrderStatus == "DRAFT" || currentWorkOrderStatus == "APPROVED") ? false : true; //for new, draft, or approved work orders disable fields
            //$('#approvedByMaintenance').data("kendoDropDownList").enable(isEnabled);
            //$('#approvedByMaintenanceDate').data("kendoDatePicker").enable(isEnabled);
            $('#approvedByAreaEngineer').data("kendoDropDownList").enable(false);
            $('#approvedByAreaEngineerDate').data("kendoDatePicker").enable(false);
            $('#approvedByDistrict').data("kendoDropDownList").enable(false);
            $('#approvedByDistrictDate').data("kendoDatePicker").enable(false);
        }
        else if ("@currentUserRole" == "ENGINEER") {
            $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-primary" onclick="SaveOrUpdate(\'Submit\')"><span class="k-icon k-i-check k-button-icon"></span><span class="k-button-text">Approve</span></button>').insertAfter(".k-grid-update");

            $('#requestedByMaintenance').data("kendoDropDownList").enable(false);
            $('#requestedByMaintenanceDate').data("kendoDatePicker").enable(false);
            $('#approvedByMaintenance').data("kendoDropDownList").enable(false);
            $('#approvedByMaintenanceDate').data("kendoDatePicker").enable(false);
            $('#approvedByDistrict').data("kendoDropDownList").enable(false);
            $('#approvedByDistrictDate').data("kendoDatePicker").enable(false);
            
        }
        else if("@currentUserRole" == "USER") {
            if(!isNew){
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-dark" onclick="CreatePDF()"><span class="k-icon k-i-file-pdf k-button-icon"></span><span class="k-button-text">Generate PDF</span></button>').insertAfter(".k-grid-update");
            }
            if(isNew || (currentWorkOrderStatus != "APPROVED" && currentWorkOrderStatus != "RECEIVED" && currentWorkOrderStatus != "INSTALLED")){
                $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-primary" onclick="SaveOrUpdate(\'Submit\')"<span class="k-button-text">Save & Submit</span></button>').insertAfter(".k-grid-update");
            }            
            $('<button type="button" class="k-button k-button-md k-button-rectangle k-rounded-md k-button-solid k-button-solid-secondary" onclick="SaveOrUpdate(\'Save\')"><span class="k-button-text">Save</span></button>').insertAfter(".k-grid-update");

            //var isEnabled = (isNew || currentWorkOrderStatus == "DRAFT" || currentWorkOrderStatus == "APPROVED") ? false : true; //for new, draft, or approved work orders disable fields
            $('#approvedByMaintenance').data("kendoDropDownList").enable(false);
            $('#approvedByMaintenanceDate').data("kendoDatePicker").enable(false);
            $('#approvedByAreaEngineer').data("kendoDropDownList").enable(false);
            $('#approvedByAreaEngineerDate').data("kendoDatePicker").enable(false);
            $('#approvedByDistrict').data("kendoDropDownList").enable(false);
            $('#approvedByDistrictDate').data("kendoDatePicker").enable(false);
        }

        if ($('#approvedByDistrict').data("kendoDropDownList").value().toString().length == 0) {
            $('#signReceivedOnDate').data("kendoDatePicker").enable(false);
            $('#signInstalledOnDate').data("kendoDatePicker").enable(false);
        }
    }


    // Method that sets if the popup will get closed or not when clicking the update and close buttons **********************************************
    function onEditWindowClose(e){
        //alert("on edit window close: " + closePopup);
        if (!closePopup){
            e.preventDefault();
            closePopup = true;
        }
    }

    // Sends email when clicking on the notify button ************************************************************************************************
    function notifyButton(message, workOrder){
        $.ajax({
            type: 'POST',
            url: '/WorkOrder/SendMail',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(workOrder),
            success: function (result) {
                fnShowMessage(message + " and notification sent", "Success");
            },
            error: function (xhr, textStatus, errorThrown) {
                fnShowMessage(xhr.responseText, "Error");
            }
        });
    }

    // Sets behaviour of popup fro a new or an existing work order **************************************************************************************
    function SaveOrUpdate(btnType) {

		// Reinitialize the validator
        $("#workOrderForm").kendoValidator({
            validateOnBlur: true, // Ensure validation happens when the user leaves an empty field
            errorTemplate: '<div class="k-tooltip k-tooltip-validation">' +
                   '<span class="k-icon k-i-warning"></span> #=message#</div>',

            rules: {
                uploadValidation: function (input) {
                    // Apply validation only to Kendo Upload elements with IDs that start with "files-sign-"
                    if (input.attr("id") && input.attr("id").startsWith("files-sign-")) {
                        /* var upload = input.closest(".k-upload").data("kendoUpload");  */// Get the Kendo Upload instance
                        var upload = $("#" + input.attr("id")).data("kendoUpload");
                        // Check if files are present using Kendo Upload API
                        if (upload.getFiles().length === 0) {
                            //alert("NO files");
                            input.closest(".k-upload").css("border", "1px solid red"); // Add red border for invalid
                            return false; // Validation failed
                        } else {
                            //alert("YES files");
                            input.closest(".k-upload").css("border", ""); // Reset border for valid
                            return true; // Validation passed
                        }
                    }
                    return true; // Skip validation for other inputs
                },
                requiredDateWhenApproverSelected: function (input) {
                    if (input.is("#approvedByMaintenanceDate") && $("#approvedByMaintenance").data("kendoDropDownList").value()) {
                        return input.val().trim() !== "";
                    }
                    if (input.is("#approvedByAreaEngineerDate") && $("#approvedByAreaEngineer").data("kendoDropDownList").value()) {
                        return input.val().trim() !== "";
                    }
                    if (input.is("#approvedByDistrictDate") && $("#approvedByDistrict").data("kendoDropDownList").value()) {
                        return input.val().trim() !== "";
                    }
                    return true; // Skip validation for other inputs
                },
                requiredApproverWhenDateSelected: function (input) {
                    if (input.is("#approvedByMaintenance") && $("#approvedByMaintenanceDate").data("kendoDatePicker").value()) {
                        return input.val().trim() !== "";
                    }
                    if (input.is("#approvedByAreaEngineer") && $("#approvedByAreaEngineerDate").data("kendoDatePicker").value()) {
                        return input.val().trim() !== "";
                    }
                    if (input.is("#approvedByDistrict") && $("#approvedByDistrictDate").data("kendoDatePicker").value()) {
                        return input.val().trim() !== "";
                    }
                    return true; // Skip validation for other inputs
                }
            },
            messages:{
				uploadValidation: "Please upload a file",
				requiredDateWhenApproverSelected: "A date is required when an approver is selected",
                requiredApproverWhenDateSelected: "An approver is required when a date is selected"
            }
        });
            
        //$("#workOrderForm").kendoValidator();
        
        // Trigger validation before form submission
        var validator = $("#workOrderForm").data("kendoValidator");
        if (!validator.validate()) {
            $(".k-invalid-msg").each(function () {
                $(this).addClass("k-tooltip-validation"); // Force tooltip styling for validation
            });

            fnShowMessage("Please fill in all required fields", "Error");

            // Destroy/Reset the validator to avoid multiple rules
            if ($("#workOrderForm").data("kendoValidator")) {
                $("#workOrderForm").data("kendoValidator").destroy();
            }

            return;
        }

        // Destroy/Reset the validator to avoid multiple rules
        if ($("#workOrderForm").data("kendoValidator")) {
            $("#workOrderForm").data("kendoValidator").destroy();
        }

        //closePopup = false;
        if (isNew){
            //closePopup = true;
            SaveWorkOrder(btnType);
        }
        else{
            //closePopup = false;
            UpdateWorkOrder(btnType);
        }
    }

    // ************************************************************************************************************************************************
    function LoadWorkOrderInfo(result) {
        var jsonResult = jQuery.parseJSON(result);
        var dropdownVal;

        // Get the current status of the work order selected
        currentWorkOrderStatus = jsonResult[0].Status;

        //disable fields when status is APPROVED for users and supervisors
        var isEnabled = !(currentWorkOrderStatus === "APPROVED" &&
        ("@currentUserRole" === "USER" || "@currentUserRole" === "SUPERVISOR"));

        // Set values to UI controls
        dropdownVal = jsonResult[0].MaterialRequestedFromId;
        var requestedFromDropdown = $("#requestedFrom").data("kendoDropDownList");
        if (requestedFromDropdown) {
            requestedFromDropdown.value(dropdownVal);
            requestedFromDropdown.enable(isEnabled);
        }

        dropdownVal = jsonResult[0].MaterialRequestedById;
        var requestedByDropdown = $("#requestedBy").data("kendoDropDownList");
        if (requestedByDropdown) {
            requestedByDropdown.value(dropdownVal);
            requestedByDropdown.enable(isEnabled);
        }

        dropdownVal = jsonResult[0].FY;
        var yearDropdown = $("#year").data("kendoDropDownList");
        if (yearDropdown) {
            yearDropdown.value(dropdownVal);
            yearDropdown.enable(isEnabled);
        }

        dropdownVal = jsonResult[0].DepartmentId;
        var deptDropdown = $("#department").data("kendoDropDownList");
        if(deptDropdown){
			deptDropdown.value(dropdownVal);
			deptDropdown.enable(isEnabled);
        }

        dropdownVal = jsonResult[0].AccountId;
		var accountDropdown = $("#account").data("kendoDropDownList");
		if (accountDropdown) {
			accountDropdown.value(dropdownVal);
			accountDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].FundId;
		var fundDropdown = $("#fund").data("kendoDropDownList");
		if (fundDropdown) {
			fundDropdown.value(dropdownVal);
			fundDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].TaskId;
		var taskDropdown = $("#task").data("kendoDropDownList");
		if (taskDropdown) {
			taskDropdown.value(dropdownVal);
			taskDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].PCBusId;
		var pcBusDropdown = $("#pcBus").data("kendoDropDownList");
		if (pcBusDropdown) {
			pcBusDropdown.value(dropdownVal);
			pcBusDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].ProjectId;
		var projectDropdown = $("#project").data("kendoDropDownList");
		if (projectDropdown) {
			projectDropdown.value(dropdownVal);
			projectDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].ActivityId;
		var activityDropdown = $("#activity").data("kendoDropDownList");
		if (activityDropdown) {
			activityDropdown.value(dropdownVal);
			activityDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].ResTypeId;
		var resTypeDropdown = $("#resType").data("kendoDropDownList");
		if (resTypeDropdown) {
			resTypeDropdown.value(dropdownVal);
			resTypeDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].IsHold;
        var isHoldCheckBox = $("#isHold").data("kendoCheckBox");
        if (isHoldCheckBox) {
            isHoldCheckBox.check(dropdownVal);
            isHoldCheckBox.enable(isEnabled);
        }

        dropdownVal = jsonResult[0].RequestedByMaintenanceId;
		var requestedByDropdown = $("#requestedByMaintenance").data("kendoDropDownList");
		if (requestedByDropdown) {
			requestedByDropdown.value(dropdownVal);
			requestedByDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].ApprovedByMaintenanceId;
		var approvedByDropdown = $("#approvedByMaintenance").data("kendoDropDownList");
		if (approvedByDropdown) {
			approvedByDropdown.value(dropdownVal);
			approvedByDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].ApprovedByAreaEngineerId;
        var approvedByAreaEngineerDropdown = $("#approvedByAreaEngineer").data("kendoDropDownList");
		if (approvedByAreaEngineerDropdown) {
			approvedByAreaEngineerDropdown.value(dropdownVal);
			approvedByAreaEngineerDropdown.enable(isEnabled);
		}

        dropdownVal = jsonResult[0].ApprovedByDistrictId;
		var approvedByDistrictDropdown = $("#approvedByDistrict").data("kendoDropDownList");
		if (approvedByDistrictDropdown) {
			approvedByDistrictDropdown.value(dropdownVal);
			approvedByDistrictDropdown.enable(isEnabled);
		}

        var dateParts = jsonResult[0].RequestedByMaintenanceDate.split('-');
        var date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
		var requestedByDatePicker = $("#requestedByMaintenanceDate").data("kendoDatePicker");
		if (requestedByDatePicker) {
			requestedByDatePicker.value(date);
			requestedByDatePicker.enable(isEnabled);
		}

        if (jsonResult[0].ApprovedByMaintenanceDate != null){
            dateParts = jsonResult[0].ApprovedByMaintenanceDate.split('-');
            date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
			var approvedByMaintenanceDatePicker = $("#approvedByMaintenanceDate").data("kendoDatePicker");
			if (approvedByMaintenanceDatePicker) {
                approvedByMaintenanceDatePicker.value(date);
                approvedByAreaEngineerDropdown.enable(isEnabled);
            }
        }

        if (jsonResult[0].ApprovedByAreaEngineerDate != null) {
            dateParts = jsonResult[0].ApprovedByAreaEngineerDate.split('-');
            date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
			var approvedByAreaEngineerDatePicker = $("#approvedByAreaEngineerDate").data("kendoDatePicker");
			if (approvedByAreaEngineerDatePicker) {
				approvedByAreaEngineerDatePicker.value(date);
				approvedByAreaEngineerDropdown.enable(isEnabled);
			}
        }

        if (jsonResult[0].ApprovedByDistrictDate != null){
            dateParts = jsonResult[0].ApprovedByDistrictDate.split('-');
            date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
            var approvedByDistrictDatePicker = $("#approvedByDistrictDate").data("kendoDatePicker");
			if (approvedByDistrictDatePicker) {
				approvedByDistrictDatePicker.value(date);
				approvedByDistrictDropdown.enable(isEnabled);
			}
        }

        if (jsonResult[0].SignReceivedDate != null){
            dateParts = jsonResult[0].SignReceivedDate.split('-');
            date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
            $("#signReceivedOnDate").data("kendoDatePicker").value(date);
        }

        if (jsonResult[0].SignInstalledDate != null){
            dateParts = jsonResult[0].SignInstalledDate.split('-');
            date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
            $("#signInstalledOnDate").data("kendoDatePicker").value(date);
        }    
        LoadWorkOrderItemInfo(jsonResult);       
    }

    // ****************************************************************************************************************************************************
    function LoadWorkOrderItemInfo(jsonResult) {
        var itemsNumber = jsonResult[0].Items.length;
        var controlVal;

        //disable fields when status is APPROVED for users and supervisors
        var isEnabled = !(currentWorkOrderStatus === "APPROVED" &&
        ("@currentUserRole" === "USER" || "@currentUserRole" === "SUPERVISOR"));

        for (var i = 1; i <= itemsNumber; i++) {
            addSegment(jsonResult[0].Items[i - 1].SignImage, jsonResult[0].Items[i - 1].InstalledImage, jsonResult[0].Items[i - 1].SignAttachment);
        }

        for (var i = 1; i <= itemsNumber; i++) {
            
            controlVal = jsonResult[0].Items[i - 1].NIGP;
			var nigpTextArea = $("#nigp-" + i).data("kendoTextArea");
			if (nigpTextArea) {
				nigpTextArea.value(controlVal);
				nigpTextArea.enable(isEnabled);				
			}

            // RDC
            // controlVal = jsonResult[0].Items[i - 1].RDC;
            // $("#rdc-" + i).data("kendoCheckBox").check(controlVal);

            controlVal = jsonResult[0].Items[i - 1].Quantity;
			var quantityNumericTextBox = $("#quantity-" + i).data("kendoNumericTextBox");
			if (quantityNumericTextBox) {
				quantityNumericTextBox.value(controlVal);
				quantityNumericTextBox.enable(isEnabled);
			}

            // Kendo Upload control for image info should be initialized here.
            // However, Telerik requires that initialization must be done at the time the control is created.
            // This is all done in addSegment function.

            controlVal = jsonResult[0].Items[i - 1].Name;
            var signDesignationTextArea = $("#sign-designation-" + i).data("kendoTextArea");
			if (signDesignationTextArea) {
				signDesignationTextArea.value(controlVal);
				signDesignationTextArea.enable(isEnabled);
			}

            // Show the area engineer approval label when openning an exising record
            designationLabelId = 'sign-designation-label-' + i;
            if (controlVal == 'W12-2' || controlVal == 'W12-2A')
                $('#' + designationLabelId).show();

            controlVal = jsonResult[0].Items[i - 1].Size;
			var signSizeTextArea = $("#sign-size-" + i).data("kendoTextArea");
			if (signSizeTextArea) {
				signSizeTextArea.value(controlVal);
				signSizeTextArea.enable(isEnabled);
			}

            controlVal = jsonResult[0].Items[i - 1].Color;
			var signColorTextArea = $("#sign-color-" + i).data("kendoTextArea");
			if (signColorTextArea) {
				signColorTextArea.value(controlVal);
                signColorTextArea.enable(isEnabled);
            }

            // RUSH ORDER
            controlVal = jsonResult[0].Items[i - 1].Rush;
			var rushOrderCheckBox = $("#rush-order-" + i).data("kendoCheckBox");
            if (rushOrderCheckBox) {
				rushOrderCheckBox.check(controlVal);
				rushOrderCheckBox.enable(isEnabled);
			}

            // NEW INSTALLATION
            controlVal = jsonResult[0].Items[i - 1].New;
			var newInstallationCheckBox = $("#new-installation-" + i).data("kendoCheckBox");
            if (newInstallationCheckBox) {
				newInstallationCheckBox.check(controlVal);
				newInstallationCheckBox.enable(isEnabled);
            }

            //controlVal = jsonResult[0].Items[i - 1].Instructions;
            //$("#instructions-" + i).data("kendoTextArea").value(controlVal);

            controlVal = jsonResult[0].Items[i - 1].SpecialInstructions;
			var specialInstructionsTextArea = $("#specialInstructions-" + i).data("kendoTextArea");
			if (specialInstructionsTextArea) {
				specialInstructionsTextArea.value(controlVal);
				specialInstructionsTextArea.enable(isEnabled);
            }

            controlVal = jsonResult[0].Items[i - 1].Latitude;
			var latitudeTextArea = $("#latitude-" + i).data("kendoTextArea");
            if (latitudeTextArea) {
				latitudeTextArea.value(controlVal);
				latitudeTextArea.enable(isEnabled);
			}
         
            controlVal = jsonResult[0].Items[i - 1].Longitude;
			var longitudeTextArea = $("#longitude-" + i).data("kendoTextArea");
            if (longitudeTextArea) {
				longitudeTextArea.value(controlVal);
                longitudeTextArea.enable(isEnabled);
            }

            // Kendo Upload control for attachment info should be initialized here.
            // However, Telerik requires that initialization must be done at the time the control is created.
            // This is all done in addSegment function.

            if (jsonResult[0].Items[i - 1].ReceivedDate != null) {
                var dateParts = jsonResult[0].Items[i - 1].ReceivedDate.split('-');
                var date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
                $("#sign-received-date-" + i).data("kendoDatePicker").value(date);
            }

            if (jsonResult[0].Items[i - 1].InstalledDate != null) {
                var dateParts = jsonResult[0].Items[i - 1].InstalledDate.split('-');
                var date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);
                $("#sign-installed-date-" + i).data("kendoDatePicker").value(date);
            }

            // Kendo Upload control for installed image info should be initialized here.
            // However, Telerik requires that initialization must be done at the time the control is created.
            // This is all done in addSegment function.

        }
    }

    // ************************************************************************************************************************************************
    function LoadMaintenanceSectionInfo(result) {
        if (result == null)
            return;

        var jsonResult = jQuery.parseJSON(result);

        $("#requestedBy").data("kendoDropDownList").value(jsonResult[0].Id);
        $("#department").data("kendoDropDownList").value(jsonResult[0].DepartmentId);
        $("#account").data("kendoDropDownList").value(jsonResult[0].AccountId);
        $("#fund").data("kendoDropDownList").value(jsonResult[0].FundId);
        $("#task").data("kendoDropDownList").value(jsonResult[0].TaskId);
        $("#pcBus").data("kendoDropDownList").value(jsonResult[0].PCBusId);
        $("#project").data("kendoDropDownList").value(jsonResult[0].ProjectId);
        $("#activity").data("kendoDropDownList").value(jsonResult[0].ActivityId);
        $("#resType").data("kendoDropDownList").value(jsonResult[0].ResTypeId);
    }

    // ****************************************************************************************************************************************************
    function ProjectNameEditor(container, options) {
        $('<input required name="Projects">')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "Name",
                dataValueField: "Id",
                dataSource: {
                    type: "ajax",
                    transport: {
                        read: "WorkOrder/GetProjects"
                    }
                }
            });
    }

    // *************************************************************************************************************************************************
    function MaintenanceSectionContactNameEditor(container, options) {
        $('<input required name="MaintenanceSectionContacts">')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "FullName",
                dataValueField: "Id",
                dataSource: {
                    type: "ajax",
                    transport: {
                        read: "WorkOrder/GetMaintenanceSectionContacts"
                    }
                }
            });
    }

    // **************************************************************************************************************************************************
    function DistrictContactNameEditor(container, options) {
        $('<input required name="DistrictContacts">')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "FullName",
                dataValueField: "Id",
                dataSource: {
                    type: "ajax",
                    transport: {
                        read: "WorkOrder/GetDistrictContacts"
                    }
                }
            });
    }

    // Function to select latitude and longitude by clicking on the map *********************************************************************************
    function onClick(e) {
        var latitude = $("#latitude-1").data("kendoTextArea");
        var longitude = $("#longitude-1").data("kendoTextArea");
        var location = e.location;

        latitude.value(location.lat);
        latitude.trigger("change");

        longitude.value(location.lng);
        longitude.trigger("change");
    }

    // Function to add a block for a new sign ************************************************************************************************************
    // imageName argument is used to initialize Kendo Upload control *************************************************************************************
    function addSegment(imageName, imageInstalledName, attachmentName) {
        // Check for maximum number of items per order
        if (cloneCount >= cloneCountMax) {
            fnShowMessage("You have reached the maximum (" + cloneCountLimit + ") number of items in this work order", "Warning");
            return;
        }

        // Add to clone count
        cloneCount++;

        // Begin by creating and setting the properties of the container and the form
        $('#sign-container').append('<div id="sign-form-' + cloneCount + '"></div>');
        $('#sign-form-' + cloneCount).append('<hr/ style="height:5px;background-color:black">');
        $('#sign-form-' + cloneCount).append('<div id="padding-y-' + cloneCount + '" class="row py-3"></div>');

        // Create the left side block of the form
        $('#padding-y-' + cloneCount).append('<div id="left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        
        // Create the first (1st) block of the left side of the form
        $('#left-' + cloneCount).append('<div id="first-row-' + cloneCount + '" class="row pt-3"></div>');
        //$('#first-row-' + cloneCount).append('<div id="first-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4"></div>');

        //createCheckbox('first-row-left-' + cloneCount, 'rdc-' + cloneCount);
        
        //$('#first-row-left-' + cloneCount).append('<h6 style="display:inline">   RDC</h6>');
  
        $('#first-row-' + cloneCount).append('<div id="first-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4"></div>');

        createCheckbox('first-row-left-' + cloneCount, 'rush-order-' + cloneCount);

        $('#first-row-left-' + cloneCount).append('<h6 style="display:inline" class="pt-3">   Rush order</h6>');
  
        $('#first-row-' + cloneCount).append('<div id="first-row-center-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4"></div>');

        createCheckbox('first-row-center-' + cloneCount, 'new-installation-' + cloneCount);

        $('#first-row-center-' + cloneCount).append('<h6 style="display:inline" class="pt-3">   New installation</h6>');


        // Create the second (2nd) block of the left side of the form 
        $('#left-' + cloneCount).append('<div id="second-row-' + cloneCount + '" class="row pt-3"></div>');   
        $('#second-row-' + cloneCount).append('<div id="second-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        $('#second-row-left-' + cloneCount).append('<h6 class="align-text-bottom">NIGP *</h6>');

        createTextArea('second-row-left-' + cloneCount, 'nigp-' + cloneCount, 1, false);
        //createLabel('second-row-left-' + cloneCount, 'nigplabel-' + cloneCount);

        $('#second-row-' + cloneCount).append('<div id="second-row-right-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        $('#second-row-right-' + cloneCount).append('<h6>Quantity *</h6>');

        createNumericTextbox();

        // Create the third (3rd) block of the left side of the form
        $('#left-' + cloneCount).append('<div id="third-row-' + cloneCount + '" class="row pt-3"></div>');
        $('#third-row-' + cloneCount).append('<div id="third-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        $('#third-row-left-' + cloneCount).append('<h6 class="pt-3 align-text-bottom">Image Upload *</h6>');
        
        createUpload(imageName);

        $('#third-row-' + cloneCount).append('<div id="third-row-right-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        $('#third-row-right-' + cloneCount).append('<h6 class="pt-3">Attachment Upload</h6>');

        createUploadAttachment(attachmentName);

        // Create the fourth (4th) block of the left side of the form
        $('#left-' + cloneCount).append('<div id="fourth-row-' + cloneCount + '" class="row pt-3"></div>');
        $('#fourth-row-' + cloneCount).append('<div id="fourth-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        $('#fourth-row-left-' + cloneCount).append('<h6 class="pt-3">Latitude *</h6>');

        createTextArea('fourth-row-left-' + cloneCount, 'latitude-' + cloneCount, 1, false);

        $('#fourth-row-' + cloneCount).append('<div id="fourth-row-right-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');
        $('#fourth-row-right-' + cloneCount).append('<h6 class="pt-3">Longitude *</h6>');

        createTextArea('fourth-row-right-' + cloneCount, 'longitude-' + cloneCount, 1, false);

        // Create the fifth (5th) block of the left side of the form
        $('#left-' + cloneCount).append('<div id="fifth-row-' + cloneCount + '" class="row pt-3"></div>');
        $('#fifth-row-' + cloneCount).append('<div id="fifth-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-12 col-lg-4 col-xl-4"></div>');
        $('#fifth-row-left-' + cloneCount).append('<h6 class="pt-3">Sign designation *</h6>');

        createTextArea('fifth-row-left-' + cloneCount, 'sign-designation-' + cloneCount, 1, true);
        createLabel('fifth-row-left-' + cloneCount, 'sign-designation-label-' + cloneCount);

        $('#fifth-row-' + cloneCount).append('<div id="fifth-row-center-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-12 col-lg-4 col-xl-4"></div>');
        $('#fifth-row-center-' + cloneCount).append('<h6 class="pt-3">Sign size *</h6>');

        createTextArea('fifth-row-center-' + cloneCount, 'sign-size-' + cloneCount, 1, false);

        $('#fifth-row-' + cloneCount).append('<div id="fifth-row-right-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-12 col-lg-4 col-xl-4"></div>');
        $('#fifth-row-right-' + cloneCount).append('<h6 class="pt-3">Sign color *</h6>');

        createTextArea('fifth-row-right-' + cloneCount, 'sign-color-' + cloneCount, 1, false);

        // $('#left-' + cloneCount).append('<h6 class="pt-3">Instructions *</h6>');
        // createTextArea('left-' + cloneCount, 'instructions-' + cloneCount, 2, false);
        
        // Create block on the left side of the form for special instructions
        $('#left-' + cloneCount).append('<h6 class="pt-3">Special Instructions *</h6>');

        createTextArea('left-' + cloneCount, 'specialInstructions-' + cloneCount, 2, false);

        $('#padding-y-' + cloneCount).append('<div id="right-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6"></div>');

        createMap();

        $('#sign-form-' + cloneCount).append('<div id="button-row-' + cloneCount + '" class="py-3 text-center"></div>');
        
        // Create the sixth (6th) block of the left side of the form
        $('#left-' + cloneCount).append('<div id="sixth-row-' + cloneCount + '" class="row pt-3"></div>');
        $('#sixth-row-' + cloneCount).append('<div id="sixth-row-left-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-12 col-lg-4 col-xl-4"></div>');
        $('#sixth-row-left-' + cloneCount).append('<h6 class="pt-3">Sign received date</h6>');

        createDatePicker('sixth-row-left-' + cloneCount, 'sign-received-date-' + cloneCount);

        $('#sixth-row-' + cloneCount).append('<div id="sixth-row-center-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-12 col-lg-4 col-xl-4"></div>');
        $('#sixth-row-center-' + cloneCount).append('<h6 class="pt-3">Sign installed date</h6>');

        createDatePicker('sixth-row-center-' + cloneCount, 'sign-installed-date-' + cloneCount);

        $('#sixth-row-' + cloneCount).append('<div id="sixth-row-right-' + cloneCount + '" class="form-group col-12 col-sm-12 col-md-12 col-lg-4 col-xl-4"></div>');
        $('#sixth-row-right-' + cloneCount).append('<h6 class="pt-3">Sign installed image</h6>');

        createUploadInstalled(imageInstalledName);


        // Add button to delete a sign block if there are currently at least 2 blocks  
        if (cloneCount >= 2)
            createButtonDeleteSign();
    }

    // Function to create a kendo button to delete sign segment dynamically *******************************************************************************
    function createButtonDeleteSign() {
        var cloneCountAux = cloneCount;
        //$('#sign-form-' + cloneCountAux).append('<button type="button" id="remove-sign-' + cloneCountAux + '"> Remove sign </button>');
        $('#button-row-' + cloneCountAux).append('<button type="button" id="remove-sign-' + cloneCountAux + '"> Remove sign </button>');
        $('#remove-sign-' + cloneCountAux).kendoButton({
            themeColor: "error",
            click: function (e) {
                $('#sign-form-' + cloneCountAux).remove();
                cloneCountMax++;
            }
        });
    }

    // Function to create a kendo dropdown list dynamically *******************************************************************************************
    function createDropdown() {
        $('#first-row-left-' + cloneCount).append('<input id="nigp-' + cloneCount + '">');
        $('#nigp-' + cloneCount).kendoDropDownList({
            dataTextField: 'Name',
            dataValueField: 'Id',
            filter: 'startsWith',
            dataSource: {
                transport: {
                    read: {
                        url: 'WorkOrder/GetNIGPsAux',
                        dataType: 'json'
                    }
                }
            },
            value: null
        });
    }

    // Function to create kendo numeric texbox dynamically *********************************************************************************************
    function createNumericTextbox() {
        $('#second-row-right-' + cloneCount).append('<input id="quantity-' + cloneCount + '" />');
        $('#quantity-' + cloneCount).kendoNumericTextBox({
            value: 1,
            format: 'n0',
            min: 1,
            max: 10,
        });
    }

    // Function to create kendo checkbox dynamically ***************************************************************************************************
    function createCheckbox(idToAppend, id) {
        $('#' + idToAppend).append('<input id="' + id + '" />');
        $('#' + id).kendoCheckBox({
            size: "large",
            rounded: "large"
        });
    }

    // Function to create kendo text area dynamically *************************************************************************************************
    function createTextArea(idToAppend, id, rowsNumber, isDesignation) {
        $('#' + idToAppend).append('<textarea id="' + id + '" name="' + id + '" required validationMessage="This field is required" style="height: auto;"></textarea>');
        $('#' + id).kendoTextArea({
            rows: rowsNumber,
            change: function()
            {
                if (isDesignation){
                    this.value(this.value().replaceAll(" ", ""));
                    position = id.lastIndexOf('-') + 1;
                    designationTextAreaId = id.substring(position);
                    designationLabelId = 'sign-designation-label-' + designationTextAreaId; 
                    designationTextAreaValue = $('#' + id).val();

                    if (designationTextAreaValue == 'W12-2' || designationTextAreaValue == 'W12-2A')
                        $('#' + designationLabelId).show();
                    else
                        $('#' + designationLabelId).hide();
                }
            }
        });
    }

    // Function to create label dynamically ***********************************************************************************************************
    function createLabel(idToAppend, id){
        $('#' + idToAppend).append('<label id="' + id + '" style="height: auto; color: red">Requires area engineer approval</label>');
        $('#' + id).hide();
    }

    // Function to create kendo date picker dynamically *************************************************************************************************
    function createDatePicker(idToAppend, id) {
        $('#' + idToAppend).append('<input id="' + id + '" />');
        $('#' + id).kendoDatePicker({
            format: 'MMM-dd-yyyy'
        });
    }

    // Function to create a kendo upload dynamically for image attachment *****************************************************************************
    // imageName must be of type string
    function createUpload(imageName) {
        var image = [];
        var isReplacingFile = false;

        //disable fields when status is APPROVED for users and supervisors
        var isEnabled = !(currentWorkOrderStatus === "APPROVED" &&
        ("@currentUserRole" === "USER" || "@currentUserRole" === "SUPERVISOR"));

        if (typeof imageName != "string")
            imageName = null;

        if (imageName != null)
            image = [{name:imageName}];

        //$('#left-' + cloneCount).append('<input id="files-' + cloneCount + '" name="files" type="file"/>');
        var uploadId = 'files-sign-' + cloneCount;
        $('#third-row-left-' + cloneCount).append('<input id="' + uploadId + '" name="files" type="file"/>');
        var uploadWidget = $('#' + uploadId).kendoUpload({
            multiple: false,
            async: {
                saveUrl: '/WorkOrder/SaveUploadedImage',
                removeUrl: '/WorkOrder/RemoveUploadedImage',
                autoUpload: true
            },
            files: image,
            select: function (e) {
                isReplacingFile = true; //reset flag on file selection

                var allowedExtensions = [".png", ".jpg", ".jpeg"]; // Allowed file types
                var isValid = true;

                $.each(e.files, function (index, file) {
                    var extension = file.extension.toLowerCase();
                    if (allowedExtensions.indexOf(extension) === -1) {
                        isValid = false;
                    }
                });

                if (!isValid) {
                    e.preventDefault(); // Cancel file selection
                    fnShowMessage("Only PNG, JPG, and JPEG are allowed", "Invalid file type");
                }
            },
            success: function(e){
                isReplacingFile = false; //reset flag after successful upload
                onUploadSuccess(e);
            },
            remove: function (e) {
                onFileRemoval(e, isReplacingFile);
            }
        }).data("kendoUpload");
        if (uploadWidget) {
            uploadWidget.enable(isEnabled);
        }

        // if length of array is greater than zero, it means that an image already exists (an existing record is being edited)
        if (image.length > 0) {
            onUploadSuccessAux();
        }   
    }

    // Function to create a kendo upload dynamically for installed image attachment *****************************************************************************
    // imageName must be of type string
    function createUploadInstalled(imageInstalledName) {
        var imageInstalled = [];
        var isReplacingFile = false;

        if (typeof imageInstalledName != "string")
            imageInstalledName = null;

        if (imageInstalledName != null)
            imageInstalled = [{ name: imageInstalledName }];

        //$('#left-' + cloneCount).append('<input id="files-' + cloneCount + '" name="files" type="file"/>');
        $('#sixth-row-right-' + cloneCount).append('<input id="files-installed-' + cloneCount + '" name="filesInstalled" type="file"/>');
        $('#files-installed-' + cloneCount).kendoUpload({
            multiple: false,
            async: {
                saveUrl: '/WorkOrder/SaveUploadedInstalledImage',
                removeUrl: '/WorkOrder/RemoveUploadedInstalledImage',
                autoUpload: true
            },
            files: imageInstalled,
            select: function(){
                isReplacingFile = true; //reset flag on file selection
            },
            success: function(e){
                isReplacingFile = false; //reset flag after successful upload
                onInstalledImageUploadSuccess(e);
            },
            remove: function (e) {
                onFileRemoval(e, isReplacingFile);
            }
        });

        // if length of array is greater than zero, it means that an image already exists (an existing record is being edited)
        if (imageInstalled.length > 0) {
            onInstalledImageUploadSuccessAux();
        }
    }

    // Function to create a kendo upload dynamically for document attachment ***************************************************************************
    // attachmentName must be of type string
    function createUploadAttachment(attachmentName) {
        var attachment = [];
        var isReplacingFile = false;

        //disable fields when status is APPROVED for users and supervisors
        var isEnabled = !(currentWorkOrderStatus === "APPROVED" &&
        ("@currentUserRole" === "USER" || "@currentUserRole" === "SUPERVISOR"));

        if (typeof attachmentName != "string")
            attachmentName = null;

        if (attachmentName != null)
            attachment = [{name:attachmentName}];
        
        //$('#left-' + cloneCount).append('<input id="files-' + cloneCount + '" name="files" type="file"/>');
        var attachmentId = 'attachments-' + cloneCount;
        $('#third-row-right-' + cloneCount).append('<input id="' + attachmentId  + '" name="attachments" type="file"/>');
        var attachmentUpload = $('#' + attachmentId).kendoUpload({
            multiple: false,
            async: {
                saveUrl: '/WorkOrder/SaveUploadedAttachment',
                removeUrl: '/WorkOrder/RemoveUploadedAttachment',
                autoUpload: true
            },
            files: attachment,
            select: function(){
                isReplacingFile = true; //reset flag on file selection
            },
            success: function(e){
                isReplacingFile = false; //reset flag after successful upload
                onUploadAttachmentSuccess(e);
            },
            remove: function (e) {
                onFileRemoval(e, isReplacingFile);
        }
        }).data("kendoUpload");
        if (attachmentUpload) {
            attachmentUpload.enable(isEnabled);
        }

        // if length of array is greater than zero, it means that an image already exists (an existing record is being edited)
        if (attachment.length > 0) {
            onUploadAttachmentSuccessAux();
        }
    }

     // On image, attachment, image installed remove event *********************************************************************************************************************
    function onFileRemoval(e, isReplacingFile) {
        if(isReplacingFile){
            isReplacingFile = false; //reset flag after replacement
            return;                    
        }
        e.preventDefault(); //prevent default removal
        showConfirmationDialog("Delete File", "Are you sure you want to delete the uploaded file?", function () {
            var fileNames = e.files.map(file => file.name);
            $.ajax({
                url: '/WorkOrder/RemoveUploadedImage',
                type: 'POST',
                data: { fileNames: fileNames },
                traditional: true,
                success: function() { //on successful deletion, update html
                    var selectorPrefix = '#' + e.sender.element.attr('id');
                    var $uploadElement = $(selectorPrefix).closest('.k-upload');
                    $uploadElement.find('.k-upload-files').remove();
                    $uploadElement.addClass("k-upload-empty");
                    $uploadElement.find('.k-upload-status').remove(); //remove upload status
                    $uploadElement.find('.k-dropzone-hint').removeClass('k-hidden'); //remove k-hidden class
                }
            });                    
        });
    }

    // Function to create a confirmation dialog ***************************************************************************
    // title, message must be of type string and onConfirm must be a function
    function showConfirmationDialog(title, message, onConfirm) {
        $('<div></div>').kendoDialog({
            title: title,
            content: `<p>${message}</p>`,
            actions: [
                { text: 'Yes', primary: true, action: onConfirm },
                { text: 'No', primary: false, action: function () { return true; } }
            ],
            width: "400px",
            modal: true
        }).data("kendoDialog").open();
    }

    // Upload Control Success Event *********************************************************************************************************************
    function onUploadSuccess(e) {
        if (e.operation == "upload") {
            onUploadSuccessAux();
        }
    }

    // *************************************************************************************************************************************************
    function onUploadSuccessAux() {
        // $('.k-file-name').eq(cloneCount - 1).click(onUploadClick);
        // $('.k-file-name').eq(cloneCount - 1).mouseover(onUploadMouseOver);
        // $('.k-file-name').addClass("link-primary");
        $('#third-row-left-' + cloneCount).find('.k-widget').find('.k-upload-files').find('.k-file').find('.k-file-name-size-wrapper').find('.k-file-name').eq(0).click(onUploadClick);
        $('#third-row-left-' + cloneCount).find('.k-widget').find('.k-upload-files').find('.k-file').find('.k-file-name-size-wrapper').find('.k-file-name').eq(0).mouseover(onUploadMouseOver);
        $('#third-row-left-' + cloneCount).find('.k-widget').find('.k-upload-files').find('.k-file').find('.k-file-name-size-wrapper').find('.k-file-name').addClass("link-primary");
    }

    // Upload Control Click Event ***********************************************************************************************************************
    function onUploadClick() {
        var imageName = $('.k-file-name').eq($('.k-file-name').index(this)).attr('title');
        //var imageName = $('#third-row-left-' + cloneCount).find('.k-widget').find('.k-upload-files').find('.k-file').find('.k-file-name-size-wrapper').find('.k-file-name').eq($('#third-row-left-' + cloneCount).find('.k-widget').find('.k-upload-files').find('.k-file').find('.k-file-name-size-wrapper').find('.k-file-name').index(this)).attr('title');
        var imageWindow = $('#imageWindow').data('kendoWindow');
        imageWindow.content("<img class='img-fluid' src='/images/signs/" + imageName + "' alt='Image'>");
        imageWindow.center();
        imageWindow.open();
    }

    // Upload Control Mouse Over Event ******************************************************************************************************************
    function onUploadMouseOver() {
        $('.k-file-name').css('cursor', 'pointer');
        //$('#third-row-left-' + cloneCount).find('.k-widget').find('.k-upload-files').find('.k-file').find('.k-file-name-size-wrapper').find('.k-file-name').css('cursor', 'pointer');
    }

    // Installed Image Upload Control Success Event *********************************************************************************************************************
    function onInstalledImageUploadSuccess(e) {
        if (e.operation == "upload") {
            onInstalledImageUploadSuccessAux();
        }
    }

    // *************************************************************************************************************************************************
    function onInstalledImageUploadSuccessAux() {
        //$('.k-file-name').eq(cloneCount - 1).click(onInstalledImageUploadClick);
        //$('.k-file-name').eq(cloneCount - 1).mouseover(onInstalledImageUploadMouseOver);
        //$('.k-file-name').addClass("link-primary");
        $('#sixth-row-right-' + cloneCount).children('.k-widget').children('.k-upload-files').children('.k-file').children('.k-file-name-size-wrapper').children('.k-file-name').eq(0).click(onInstalledImageUploadClick);
        $('#sixth-row-right-' + cloneCount).children('.k-widget').children('.k-upload-files').children('.k-file').children('.k-file-name-size-wrapper').children('.k-file-name').eq(0).mouseover(onInstalledImageUploadMouseOver);
        $('#sixth-row-right-' + cloneCount).children('.k-widget').children('.k-upload-files').children('.k-file').children('.k-file-name-size-wrapper').children('.k-file-name').addClass("link-primary");

    }

    // Installed Image Upload Control Click Event ***********************************************************************************************************************
    function onInstalledImageUploadClick() {
        var imageName = $('.k-file-name').eq($('.k-file-name').index(this)).attr('title');
        // var imageName = $('#sixth-row-right-' + cloneCount).children('.k-widget').children('.k-upload-files').children('.k-file').children('.k-file-name-size-wrapper').children('.k-file-name').eq($('#sixth-row-right-' + cloneCount).children('.k-widget').children('.k-upload-files').children('.k-file').children('.k-file-name-size-wrapper').children('.k-file-name').index(this)).attr('title');
        var imageWindow = $('#imageWindow').data('kendoWindow');
        imageWindow.content("<img class='img-fluid' src='/images/installed_signs/" + imageName + "' alt='Image'>");
        imageWindow.center();
        imageWindow.open();
    }

    // Installed Image Upload Control Mouse Over Event ******************************************************************************************************************
    function onInstalledImageUploadMouseOver() {
        $('.k-file-name').css('cursor', 'pointer');
    }

    // Upload Attachment Control Success Event **********************************************************************************************************
    function onUploadAttachmentSuccess(e) {
        if (e.operation == "upload") {
            onUploadAttachmentSuccessAux();
        }
    }

    // **************************************************************************************************************************************************
    function onUploadAttachmentSuccessAux() {
        $('.k-file-name').eq(cloneCount - 1).click(onUploadAttachmentClick);
        $('.k-file-name').eq(cloneCount - 1).mouseover(onUploadAttachmentMouseOver);
        $('.k-file-name').addClass("link-primary");
    }

    // Upload Attachment Control Click Event ************************************************************************************************************
    function onUploadAttachmentClick() {
        // var attachmentName = $('.k-file-name').eq($('.k-file-name').index(this)).attr('title');
        // var attachmentWindow = $('#imageWindow').data('kendoWindow');
        // imageWindow.content("<img class='img-fluid' src='/images/signs/" + imageName + "' alt='Image'>");
        // imageWindow.center();
        // imageWindow.open();
    }

    // Upload Attachment Control Mouse Over Event *******************************************************************************************************
    function onUploadAttachmentMouseOver() {
        $('.k-file-name').css('cursor', 'pointer');
    }

    // Function to create a kendo map dynamically *******************************************************************************************************
    function createMap() {
        var mapNum = cloneCount;

        $('#right-' + cloneCount).append('<div id="map-' + cloneCount + '" style="width: 100%; height: 530px;"></div>');
        var map = $('#map-' + cloneCount).kendoMap({
            zoom: 11,
            center: [27.8006, -97.3964],
            layers: [{
                type: 'tile',
                urlTemplate: 'http://a.tile.openstreetmap.org/#= zoom #/#= x #/#= y #.png',
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap contributors</a>.'
            }],
            click: function (e) {
                var latitude = $('#latitude-' + mapNum).data("kendoTextArea");
                var longitude = $('#longitude-' + mapNum).data("kendoTextArea");
                var location = e.location;

                latitude.value(location.lat);
                latitude.trigger("change");

                longitude.value(location.lng);
                longitude.trigger("change");

                addMarker(location.lat, location.lng);
            }
        }).data("kendoMap");

        // Function to add a marker dynamically
        function addMarker(lat, lng) {
            map.markers.clear();
            map.markers.add({
                location: [lat, lng],
                tooltip: {
                    content: "New Marker"
                }
            });
        }

        // Function that sets the pin at the beginning if there is a value for latitude and longitude
        // Function is delayed to ensure the textarea values are loaded first
        setTimeout(function () {

            if ($('#latitude-' + mapNum).data("kendoTextArea").value() == "")
                return;

            var savedLatitude = $('#latitude-' + mapNum).data("kendoTextArea").value();
            var savedLongitude = $('#longitude-' + mapNum).data("kendoTextArea").value();
            addMarker(savedLatitude, savedLongitude);
        }, 500); // Adjust the delay as needed
    }

    // Function to save work order ***********************************************************************************************************************
    function SaveWorkOrder(btnType) {
        var workOrder = GetWorkOrderData();
        
        if(btnType == "Save")
            workOrder.Status = "DRAFT";
        else
            workOrder.Status = "CREATED";
        //alert(workOrder.ApprovedByMaintenanceId + ', ' + workOrder.ApprovedByMaintenanceDate);
        //alert(workOrder.ApprovedByMaintenanceId.toString().length + ', ' + workOrder.ApprovedByMaintenanceDate.toString().length);
        //alert(JSON.stringify(workOrder));

        $.ajax({
            type: 'POST',
            url: '/WorkOrder/Create',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(workOrder),
            success: function (result) {
                const message = "Work order was created";
                if(btnType == "Submit")
                    notifyButton(message, result.Data[0]);
                else
                    fnShowMessage(message, "Success");
                RefreshGrid();
            },
            error: function (xhr, textStatus, errorThrown) {
                //alert(xhr.textStatus + ", " + errorThrown + ", error");
                fnShowMessage(xhr.responseText, "Error");
            }
        });
    }

    // Function to edit/update work order ***************************************************************************************************************
    function UpdateWorkOrder(btnType) {
        var workOrder = GetWorkOrderData();
        var signItems = workOrder.Items;
        var requireEngineerApproval = false;
        if(signItems && signItems.length > 0){
			const signsNeedApproval = signItems.filter(item => item.Name == 'W12-2' || item.Name == 'W12-2A');
			if(signsNeedApproval.length > 0 )
                requireEngineerApproval = true;
        }

        //set status when Save & Submit button is clicked
        if(btnType == "Submit"){       
            if(currentWorkOrderStatus == "DRAFT")
                workOrder.Status = "CREATED";
            else if((currentWorkOrderStatus == "CREATED" && !requireEngineerApproval) || currentWorkOrderStatus == "AREA ENGINEER")
                workOrder.Status = "REQUESTED";
            else if(currentWorkOrderStatus == "CREATED" && requireEngineerApproval)
                workOrder.Status = "AREA ENGINEER";
            else
                workOrder.Status =  "APPROVED";
        }
        //alert(JSON.stringify(workOrder));
        $.ajax({
            type: 'POST',
            url: '/WorkOrder/Update',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(workOrder),
            success: function (result) {
                const message = "Information was updated";
                if(btnType == "Submit")
                    notifyButton(message, result.Data[0]);
                else
                    fnShowMessage(message, "Success");
                RefreshGrid();    
            },
            error: function (xhr, textStatus, errorThrown) {
                fnShowMessage(xhr.responseText, "Error");
            }
        });
    }

    // Function that refreshes the grid ****************************************************************************************************************
    function RefreshGrid() {
        $('#workOrderGrid').data('kendoGrid').dataSource.read();
        $('#workOrderGrid').data('kendoGrid').refresh();
        //var grid = $("#workOrderGrid").data("kendoGrid");
        //grid.refresh();
    }

    // Function that calls the function that creates the PDF form **************************************************************************************
    function CreatePDF() {
        var workOrder = GetWorkOrderData();
        var fileName = '';
        $.ajax({
            type: 'POST',
            url: '/WorkOrder/ExportPdf',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(workOrder),
            success: function (result) { 
                fileName = result;
            },
            error: function (xhr, textStatus, errorThrown) {
                fnShowMessage(xhr.responseText, "Error");
            },
            complete: function () {
                window.open('/SignRequestPDFs/' + fileName, '_blank');
            }
        });
    }

    // ************************************************************************************************************************************************
    function GetWorkOrderData() {
        var files = [];
        var filesInstalled = [];
        var attachments = [];

        var workOrder = {
            Id: workOrderId,
            Number: 0,
            MaterialRequestedFromId: $("#requestedFrom").val(),
            MaterialRequestedById: $("#requestedBy").val(),
            DepartmentId: $("#department").val(),
            AccountId: $("#account").val(),
            //AccountId: $("#account").val().toString().length != 0 ? $("#account").val() : null,
            FY: $("#year").val(),
            FundId: $("#fund").val(),
            //TaskId: $("#task").val(),
            TaskId: $("#task").val().toString().length != 0 ? $("#task").val() : null,
            PCBusId: $("#pcBus").val(),
            ProjectId: $("#project").val(),
            ActivityId: $("#activity").val(),
            ResTypeId: $("#resType").val(),
            RequestedByMaintenanceId: $("#requestedByMaintenance").val(),
            RequestedByMaintenanceDate: new Date($("#requestedByMaintenanceDate").val()),
            ApprovedByMaintenanceId: $("#approvedByMaintenance").val().toString().length != 0 ? $("#approvedByMaintenance").val() : null,
            ApprovedByMaintenanceDate: $("#approvedByMaintenanceDate").val().toString().length != 0 ? new Date($("#approvedByMaintenanceDate").val()) : null,
            ApprovedByAreaEngineerId: $("#approvedByAreaEngineer").val().toString().length != 0 ? $("#approvedByAreaEngineer").val() : null,
            ApprovedByAreaEngineerDate: $("#approvedByAreaEngineerDate").val().toString().length != 0 ? new Date($("#approvedByAreaEngineerDate").val()) : null,
            ApprovedByDistrictId: $("#approvedByDistrict").val().toString().length != 0 ? $("#approvedByDistrict").val() : null,
            ApprovedByDistrictDate: $("#approvedByDistrictDate").val().toString().length != 0 ? new Date($("#approvedByDistrictDate").val()) : null,
            SignReceivedDate: $("#signReceivedOnDate").val().toString().length != 0 ? new Date($("#signReceivedOnDate").val()) : null,
            SignInstalledDate: $("#signInstalledOnDate").val().toString().length != 0 ? new Date($("#signInstalledOnDate").val()) : null,
            IsHold: $("#isHold").data("kendoCheckBox").check(),
            Status: currentWorkOrderStatus,
            Items: []
        }

        var imageName = '';
        var imageInstalledName = '';
        var attachmentName = '';

        for (var i = 1; i <= cloneCount; i++) {
            if ($('#sign-form-' + i).length > 0) {
                files = $("#files-sign-" + i).data("kendoUpload").getFiles();
                filesInstalled = $("#files-installed-" + i).data("kendoUpload").getFiles();
                attachments = $("#attachments-" + i).data("kendoUpload").getFiles();

                // if length = 0, then the sign image (upload control) was not edited, the sign image is the same as when the record was loaded
                if (files.length == 0)
                    imageName = $("#files-sign-" + i).data("kendoUpload").files[0].name;
                else
                    imageName = files[0].name;

                // if length = 0, then the installed sign image (upload control) was not edited, the installed sign image is the same as when the record was loaded
                if (filesInstalled.length == 0)
                    imageInstalledName = null;
                else
                    imageInstalledName = filesInstalled[0].name;

                // if length = 0, then the attachment (upload control) was not edited, the attachment is the same as when the record was loaded
                if (attachments.length == 0)
                    attachmentName = null;
                else
                    attachmentName = attachments[0].name;
                
                workOrder.Items.push({
                    NIGP: $("#nigp-" + i).val(),
                    //RDC: $("#rdc-" + i).data("kendoCheckBox").check(),
                    RDC: false,
                    Quantity: $("#quantity-" + i).val(),
                    //Instructions: $("#instructions-" + i).val(),
                    SignImage: imageName,
                    Name: $("#sign-designation-" + i).val(),
                    Size: $("#sign-size-" + i).val(),
                    Color: $("#sign-color-" + i).val(),
                    Rush: $("#rush-order-" + i).data("kendoCheckBox").check(),
                    New: $("#new-installation-" + i).data("kendoCheckBox").check(),
                    SpecialInstructions: $("#specialInstructions-" + i).val(),
                    Latitude: $("#latitude-" + i).val(),
                    Longitude: $("#longitude-" + i).val(),
                    SignAttachment: attachmentName,
                    ReceivedDate: $("#sign-received-date-" + i).val().toString().length != 0 ? new Date($("#sign-received-date-" + i).val()) : null,
                    InstalledDate: $("#sign-installed-date-" + i).val().toString().length != 0 ? new Date($("#sign-installed-date-" + i).val()) : null,
                    InstalledImage: imageInstalledName
                });
            }
        }
        return workOrder;
    }
</script>


<script id="popup-editor" type="text/x-kendo-template">
	@Html.Partial("_Insert")
</script>